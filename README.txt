 -----------------------
|CPSC 323 Parser Project|
 -----------------------
 
The files included in this folder are used to run a syntatic analysis on a sample of an A1 high-level program.
A lexical analysis is first performed after which the syntatic analysis is executed. Results from both the
lexical analysis and the syntatic analysis are printed out.

The output of the lexical analysis is in the following format:
    - (Tok: id= <ID#> line= <line> str= “<token>” [int= <int> | float= <float>])
The output of the syntatic analysis will be in the for of program traces
    - Each time the parser changes the stack, the current stack and the current input token (i.e., the front of the input token stream) wil be printed

The code was written in C++ using Visual Studio 2015 (v140) targeted for machines running Windows 8.1 and above.

Authored by Anthony Nguyen and Sae Hun Kim for CPSC 323 course at CSUF on Fall 2016.

File List:
    - A1-Simple.txt : The A1 grammar rule set after conversion to only simple rules.
    - A1-LRE.txt    : The A1 grammar rule set after LRE.
    - A1-LF.txt     : The A1-LRE grammar rule set after Left Factoring.
    - A1-First.txt  : The First set for each A1-LF rule.
    - A1-Follow.txt : The Follow set for each A1-LF LHS non-terminal symbol.
    - A1-Matrix.pdf : The A1 LL(1) Parser Matrix.
    - LL-Parser     : The LL(1) Parser machine source code, which is used to test the parser matrix on inputs based on the example A2 programs from the Lexer project.
    - Readme.txt    : A README.txt file (e.g., title, contact info, files list, installation/run info, bugs remaining, features added).
    - input-output  : Three input files and the corresponding output files runs of the parser, each based on the Lexer's sample programs.

Instructions:
    1. Compile and build a project in Visual Studio 2015 using the source code files provided
        - A .exe file should have been generated by Visual Studio.
            - This file can usually be found in the "Debug" directory in the project solution folder.
    2. Open up the Windows command prompt and run the .exe file generated by Visual Studio, using input redirection with a file containing a A1 high-level program.
        - Example: [project_name].exe < [input_file.file_extension]
            - [project_name].exe is the .exe file generated by Visual Studio.
            - [input_file.file_extension] is the file containing a A1 high-level program.

Contact Information:
    - Anthony Nguyen
        - anguyen787@csu.fullerton.edu
    - Sae Hun Kim
        - kimsaehun@csu.fullerton.edu

Additional Notes:
    - Manual input to the command line is not supported. Doing so will only return a lexical analysis.

Program Details:
    - Very little coding was done alone. All the functions were discussed together and implement together. As such, no single author can be accredited to a specific fuction/class.

Notes to the professor:
    - We have included 3 sample inputs and their corresponding outputs. However, all three of the Lexer's sample programs are written in the A2 language and would all result in an error. In order to see a successful execution of the parser, we have decided to modify two of the sample programs
        - a2-sample2.txt is the sample #2 from the lexer homework prompt. However, as it is written in the A2 language, the parser will output an error.
        - a1-sample1.txt and a1.sample3.txt contain code based on sample #1 and #3 from the lexer homework prompt. However it has been modified to fit the A1 grammar.
